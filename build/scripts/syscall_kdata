1 0 ali_aes_finish "ali_crypto_result" " const uint8_t *, size_t, uint8_t *, size_t *, sym_padding_t, void *"
1 1 ali_aes_get_ctx_size "ali_crypto_result" " aes_type_t, size_t *"
1 2 ali_aes_init "ali_crypto_result" " aes_type_t, _Bool, const uint8_t *, const uint8_t *, size_t, const uint8_t *, void *"
1 3 aos_alloc_trace "void" " void *, size_t"
1 4 aos_cancel_delayed_action "void" " int, aos_call_t, void *"
1 5 aos_cancel_poll_read_fd "void" " int, aos_poll_call_t, void *"
1 6 aos_cancel_work "void" " void *, aos_call_t, void *"
1 7 aos_cli_get_tag "const char *" " void"
1 8 aos_cli_init "int" " void"
0 9 aos_cli_printf "int" " const char *, ..."
1 10 aos_cli_register_command "int" " const struct cli_command *"
1 11 aos_cli_register_commands "int" " const struct cli_command *, int"
1 12 aos_cli_stop "int" " void"
1 13 aos_cli_unregister_command "int" " const struct cli_command *"
1 14 aos_cli_unregister_commands "int" " const struct cli_command *, int"
1 15 aos_close "int" " int"
1 16 aos_closedir "int" " aos_dir_t *"
0 17 aos_cloud_register_backend "void" " int (*)(const char *, const char *)"
0 18 aos_cloud_register_callback "int" " int, aos_cloud_cb_t"
0 19 aos_cloud_report "int" " const char *, const char *, void (*)(void *), void *"
0 20 aos_cloud_trigger "void" " int, const char *"
1 21 aos_current_loop "aos_loop_t" " void"
1 22 aos_fcntl "int" " int, int, int"
1 23 aos_free "void" " void *"
1 24 aos_get_hz "int" " void"
1 25 aos_ioctl "int" " int, int, unsigned long"
1 26 aos_kv_del "int" " const char *"
1 27 aos_kv_get "int" "const char *, void *, int *"
1 28 aos_kv_set "int" " const char *, const void *, int, int"
1 29 aos_loop_destroy "void" " void"
1 30 aos_loop_exit "void" " void"
1 31 aos_loop_init "aos_loop_t" " void"
1 32 aos_loop_run "void" " void"
1 33 aos_loop_schedule_call "int" " aos_loop_t *, aos_call_t, void *"
1 34 aos_loop_schedule_work "void *" " int, aos_call_t, void *, aos_call_t, void *"
1 35 aos_lseek "off_t" " int, off_t, int"
1 36 aos_mkdir "int" " const char *"
1 37 aos_msleep "void" " int"
1 38 aos_mutex_free "void" " aos_mutex_t *"
1 39 aos_mutex_lock "int" " aos_mutex_t *, unsigned int"
1 40 aos_mutex_new "int" " aos_mutex_t *"
1 41 aos_mutex_unlock "int" " aos_mutex_t *"
1 42 aos_now "long long" " void"
1 43 aos_now_ms "long long" " void"
1 44 aos_open "int" " const char *, int"
1 45 aos_opendir "aos_dir_t *" " const char *"
1 46 aos_poll "int" " struct pollfd *, int, int"
1 47 aos_poll_read_fd "int" " int, aos_poll_call_t, void *"
1 48 aos_post_delayed_action "int" " int, aos_call_t, void *"
1 49 aos_post_event "int" " uint16_t, uint16_t, unsigned long"
1 50 aos_queue_free "void" " aos_queue_t *"
1 51 aos_queue_new "int" " aos_queue_t *, void *, unsigned int, int"
1 52 aos_queue_recv "int" " aos_queue_t *, unsigned int, void *, unsigned int *"
1 53 aos_queue_send "int" " aos_queue_t *, void *, unsigned int"
1 54 aos_read "ssize_t" " int, void *, size_t"
1 55 aos_readdir "aos_dirent_t *" " aos_dir_t *"
1 56 aos_reboot "void" " void"
1 57 aos_register_event_filter "int" " uint16_t, aos_event_cb, void *"
1 58 aos_rename "int" " const char *, const char *"
1 59 aos_schedule_call "int" " aos_call_t, void *"
1 60 aos_sem_free "void" " aos_sem_t *"
1 61 aos_sem_new "int" " aos_sem_t *, int"
1 62 aos_sem_signal "void" " aos_sem_t *"
1 63 aos_sem_wait "int" " aos_sem_t *, unsigned int"
1 64 aos_stat "int" " const char *, struct stat *"
1 65 aos_sync "int" " int"
1 66 aos_task_exit "void" " int"
1 67 aos_task_getspecific "void *" " aos_task_key_t"
1 68 aos_task_key_create "int" " aos_task_key_t *"
1 69 aos_task_key_delete "void" " aos_task_key_t"
1 70 aos_task_name "const char *" " void"
1 71 aos_task_new "int" " const char *, void (*)(void *), void *, int"
1 72 aos_task_new_ext "int" " aos_task_t *, const char *, void (*)(void *), void *, int, int"
1 73 aos_task_setspecific "int" " aos_task_key_t, void *"
1 74 aos_timer_change "int" " aos_timer_t *, int"
1 75 aos_timer_free "void" " aos_timer_t *"
1 76 aos_timer_new "int" " aos_timer_t *, void (*)(void *, void *), void *, int, int"
1 77 aos_timer_start "int" " aos_timer_t *"
1 78 aos_timer_stop "int" " aos_timer_t *"
1 79 aos_uart_send "int32_t" " void *, uint32_t, uint32_t"
1 80 aos_unlink "int" " const char *"
1 81 aos_unregister_event_filter "int" " uint16_t, aos_event_cb, void *"
1 82 aos_version_get "const char *" " void"
1 83 aos_work_cancel "int" " aos_work_t *"
1 84 aos_work_destroy "void" " aos_work_t *"
1 85 aos_work_init "int" " aos_work_t *, void (*)(void *), void *, int"
1 86 aos_work_run "int" " aos_workqueue_t *, aos_work_t *"
1 87 aos_work_sched "int" " aos_work_t *"
1 88 aos_workqueue_create "int" " aos_workqueue_t *, int, int"
1 89 aos_workqueue_del "void" " aos_workqueue_t *"
1 90 aos_write "ssize_t" " int, const void *, size_t"
1 91 get_errno "int" " void"
1 92 hal_ota_get_default_module "hal_ota_module_t *" " void"
1 93 hal_ota_init "hal_stat_t" " void *"
1 94 hal_ota_read "hal_stat_t" " hal_ota_module_t *, volatile uint32_t *, uint8_t *, uint32_t"
1 95 hal_ota_register_module "void" " hal_ota_module_t *"
1 96 hal_ota_set_boot "hal_stat_t" " hal_ota_module_t *, void *"
1 97 hal_ota_write "hal_stat_t" " hal_ota_module_t *, volatile uint32_t *, uint8_t * , uint32_t"
1 98 hal_wifi_get_default_module "hal_wifi_module_t *" " void"
1 99 hal_wifi_get_ip_stat "int" " hal_wifi_module_t *, hal_wifi_ip_stat_t *, hal_wifi_type_t"
1 100 hal_wifi_get_link_stat "int" " hal_wifi_module_t *, hal_wifi_link_stat_t *"
1 101 hal_wifi_get_mac_addr "int" " hal_wifi_module_t *, uint8_t *"
1 102 hal_wifi_init "int" " void"
1 103 hal_wifi_install_event "void" " hal_wifi_module_t *, const hal_wifi_event_cb_t *"
1 104 hal_wifi_power_off "int" " hal_wifi_module_t *"
1 105 hal_wifi_power_on "int" " hal_wifi_module_t *"
1 106 hal_wifi_register_module "void" " hal_wifi_module_t *"
1 107 hal_wifi_register_monitor_cb "void" " hal_wifi_module_t *, monitor_data_cb_t"
1 108 hal_wifi_set_channel "int" " hal_wifi_module_t *, int"
1 109 hal_wifi_set_mac_addr "int" " hal_wifi_module_t *, const uint8_t *"
1 110 hal_wifi_start "int" " hal_wifi_module_t *, hal_wifi_init_type_t *"
1 111 hal_wifi_start_adv "int" " hal_wifi_module_t *, hal_wifi_init_type_adv_t *"
1 112 hal_wifi_start_scan "void" " hal_wifi_module_t *"
1 113 hal_wifi_start_scan_adv "void" " hal_wifi_module_t *"
1 114 hal_wifi_start_wifi_monitor "void" " hal_wifi_module_t *"
1 115 hal_wifi_stop_wifi_monitor "void" " hal_wifi_module_t *"
1 116 hal_wifi_suspend "int" " hal_wifi_module_t *"
1 117 hal_wifi_suspend_soft_ap "int" " hal_wifi_module_t *"
1 118 hal_wifi_suspend_station "int" " hal_wifi_module_t *"
1 119 hal_wlan_register_mgnt_monitor_cb "void" " hal_wifi_module_t *, monitor_data_cb_t"
1 120 hal_wlan_send_80211_raw_frame "int" " hal_wifi_module_t *, uint8_t *, int"
1 121 ip4addr_aton "int" " const char *, ip4_addr_t *"
1 122 ip4addr_ntoa "char *" " const ip4_addr_t *"
1 123 ipaddr_addr "u32_t" " const char *"
1 124 lwip_accept "int" " int, struct sockaddr *, socklen_t *"
1 125 lwip_bind "int" " int, const struct sockaddr *, socklen_t"
1 126 lwip_close "int" " int"
1 127 lwip_connect "int" " int, const struct sockaddr *, socklen_t"
1 128 lwip_eventfd "int" " unsigned int, int"
1 129 lwip_fcntl "int" " int, int, int"
1 130 lwip_freeaddrinfo "void" " struct addrinfo *"
1 131 lwip_getaddrinfo "int" " const char *, const char *, const struct addrinfo *, struct addrinfo **"
1 132 lwip_gethostbyname "struct hostent *" " const char *"
1 133 lwip_getpeername "int" " int, struct sockaddr *, socklen_t *"
1 134 lwip_getsockname "int" " int, struct sockaddr *, socklen_t *"
1 135 lwip_getsockopt "int" " int, int, int, void *, socklen_t *"
1 136 lwip_htonl "u32_t" " u32_t"
1 137 lwip_htons "u16_t" " u16_t"
1 138 lwip_ioctl "int" " int, long, void *"
1 139 lwip_listen "int" " int, int"
1 140 lwip_read "int" " int, void *, size_t"
1 141 lwip_recv "int" " int, void *, size_t, int"
1 142 lwip_recvfrom "int" " int, void *, size_t, int, struct sockaddr *, socklen_t *"
1 143 lwip_select "int" " int, _types_fd_set *, _types_fd_set *, _types_fd_set *, struct timeval *"
1 144 lwip_send "int" " int, const void *, size_t, int"
1 145 lwip_sendmsg "int" " int, const struct msghdr *, int"
1 146 lwip_sendto "int" " int, const void *, size_t, int, const struct sockaddr *, socklen_t"
1 147 lwip_setsockopt "int" " int, int, int, const void *, socklen_t"
1 148 lwip_shutdown "int" " int, int"
1 149 lwip_socket "int" " int, int, int"
1 150 lwip_write "int" " int, const void *, size_t"
1 151 lwip_writev "int" " int, const struct iovec *, int"
0 152 mbedtls_ssl_close "int" " void *"
0 153 mbedtls_ssl_connect "void *" " void *, const char *, int"
0 154 mbedtls_ssl_recv "int" " void *, char *, int"
0 155 mbedtls_ssl_send "int" " void *, const char *, int"
1 156 set_errno "void" " int"
1 157 sys_aos_malloc "void *" " unsigned int, size_t"
1 158 sys_aos_realloc "void *" " void *, unsigned int, size_t"
1 159 sys_aos_zalloc "void *" " unsigned int, size_t"
0 160 umesh_get_device_state "uint8_t" " void"
0 161 umesh_get_mac_address "const mac_address_t *" " media_type_t"
0 162 umesh_get_mode "uint8_t" " void"
0 163 umesh_init "ur_error_t" " node_mode_t"
0 164 umesh_set_mode "ur_error_t" " uint8_t"
0 165 umesh_start "ur_error_t" " void"
0 166 umesh_stop "ur_error_t" " void"
0 167 ur_adapter_get_default_ipaddr "const void *" " void"
0 168 ur_adapter_get_mcast_ipaddr "const void *" " void"
