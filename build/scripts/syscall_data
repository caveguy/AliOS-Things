1 0 aos_alloc_trace "1" "void aos_alloc_trace(void *addr, size_t allocator)"
1 1 aos_cancel_delayed_action "1" "void aos_cancel_delayed_action(int ms, aos_call_t cb, void *private_data)"
1 2 aos_cancel_poll_read_fd "1" "void aos_cancel_poll_read_fd(int sock, aos_poll_call_t action, void *param)"
1 3 aos_cancel_work "1" "void aos_cancel_work(void *w, aos_call_t action, void *arg1)"
1 4 aos_cli_init "1" "int aos_cli_init(void)"
1 5 aos_cli_register_command "1" "int aos_cli_register_command(const struct cli_command *command)"
1 6 aos_cli_register_commands "1" "int aos_cli_register_commands(const struct cli_command *commands, int num_commands)"
1 7 aos_cli_stop "1" "int aos_cli_stop(void)"
1 8 aos_cli_unregister_command "1" "int aos_cli_unregister_command(const struct cli_command *command)"
1 9 aos_cli_unregister_commands "1" "int aos_cli_unregister_commands(const struct cli_command *commands, int num_commands)"
1 10 aos_close "1" "int aos_close(int fd)"
1 11 aos_closedir "1" "int aos_closedir(aos_dir_t *dir)"
1 12 aos_current_loop "1" "aos_loop_t aos_current_loop(void)"
1 13 aos_fcntl "1" "int aos_fcntl(int fd, int cmd, int val)"
1 14 aos_free "1" "void aos_free(void *mem)"
1 15 aos_get_hz "1" "int aos_get_hz(void)"
1 16 aos_ioctl "1" "int aos_ioctl(int fd, int cmd, unsigned long arg)"
1 17 aos_kv_del "1" "int aos_kv_del(const char *key)"
1 18 aos_kv_get "1" "int aos_kv_get(const char *key, void *buffer, int *buffer_len)"
1 19 aos_kv_set "1" "int aos_kv_set(const char *key, const void *val, int len, int sync)"
1 20 aos_loop_destroy "1" "void aos_loop_destroy(void)"
1 21 aos_loop_exit "1" "void aos_loop_exit(void)"
1 22 aos_loop_init "1" "aos_loop_t aos_loop_init(void)"
1 23 aos_loop_run "1" "void aos_loop_run(void)"
1 24 aos_loop_schedule_call "1" "int aos_loop_schedule_call(aos_loop_t *loop, aos_call_t fun, void *arg)"
1 25 aos_loop_schedule_work "1" "void *aos_loop_schedule_work(int ms, aos_call_t action, void *arg1, aos_call_t fini_cb, void *arg2)"
1 26 aos_lseek "1" "off_t aos_lseek(int fd, off_t offset, int whence)"
1 27 aos_mkdir "1" "int aos_mkdir(const char *path)"
1 28 aos_msleep "1" "void aos_msleep(int ms)"
1 29 aos_mutex_free "1" "void aos_mutex_free(aos_mutex_t *mutex)"
1 30 aos_mutex_lock "1" "int aos_mutex_lock(aos_mutex_t *mutex, unsigned int timeout)"
1 31 aos_mutex_new "1" "int aos_mutex_new(aos_mutex_t *mutex)"
1 32 aos_mutex_unlock "1" "int aos_mutex_unlock(aos_mutex_t *mutex)"
1 33 aos_now "1" "long long aos_now(void)"
1 34 aos_now_ms "1" "long long aos_now_ms(void)"
1 35 aos_open "1" "int aos_open(const char *path, int flags)"
1 36 aos_opendir "1" "aos_dir_t *aos_opendir(const char *path)"
1 37 aos_poll "1" "int aos_poll(struct pollfd *fds, int nfds, int timeout)"
1 38 aos_poll_read_fd "1" "int aos_poll_read_fd(int sock, aos_poll_call_t cb, void *private_data)"
1 39 aos_post_delayed_action "1" "int aos_post_delayed_action(int ms, aos_call_t action, void *param)"
1 40 aos_post_event "1" "int aos_post_event(uint16_t type, uint16_t code, unsigned long value)"
1 41 aos_queue_free "1" "void aos_queue_free(aos_queue_t *queue)"
1 42 aos_queue_new "1" "int aos_queue_new(aos_queue_t *queue, void *buf, unsigned int size, int max_msg)"
1 43 aos_queue_recv "1" "int aos_queue_recv(aos_queue_t *queue, unsigned int ms, void *msg, unsigned int *size)"
1 44 aos_queue_send "1" "int aos_queue_send(aos_queue_t *queue, void *msg, unsigned int size)"
1 45 aos_read "1" "ssize_t aos_read(int fd, void *buf, size_t nbytes)"
1 46 aos_readdir "1" "aos_dirent_t *aos_readdir(aos_dir_t *dir)"
1 47 aos_reboot "1" "void aos_reboot(void)"
1 48 aos_register_event_filter "1" "int aos_register_event_filter(uint16_t type, aos_event_cb cb, void *priv)"
1 49 aos_rename "1" "int aos_rename(const char *oldpath, const char *newpath)"
1 50 aos_schedule_call "1" "int aos_schedule_call(aos_call_t fun, void *arg)"
1 51 aos_sem_free "1" "void aos_sem_free(aos_sem_t *sem)"
1 52 aos_sem_new "1" "int aos_sem_new(aos_sem_t *sem, int count)"
1 53 aos_sem_signal "1" "void aos_sem_signal(aos_sem_t *sem)"
1 54 aos_sem_wait "1" "int aos_sem_wait(aos_sem_t *sem, unsigned int timeout)"
1 55 aos_stat "1" "int aos_stat(const char *path, struct stat *st)"
1 56 aos_sync "1" "int aos_sync(int fd)"
1 57 aos_task_exit "1" "void aos_task_exit(int code)"
1 58 aos_task_getspecific "1" "void *aos_task_getspecific(aos_task_key_t key)"
1 59 aos_task_key_create "1" "int aos_task_key_create(aos_task_key_t *key)"
1 60 aos_task_key_delete "1" "void aos_task_key_delete(aos_task_key_t key)"
1 61 aos_task_name "1" "const char *aos_task_name(void)"
1 62 aos_task_new "1" "int aos_task_new(const char *name, void (*fn)(void *), void *arg, int stack_size)"
1 63 aos_task_new_ext "1" "int aos_task_new_ext(aos_task_t *task, const char *name, void (*fn)(void *), void *arg, int stack_size, int prio)"
1 64 aos_task_setspecific "1" "int aos_task_setspecific(aos_task_key_t key, void *vp)"
1 65 aos_timer_change "1" "int aos_timer_change(aos_timer_t *timer, int ms)"
1 66 aos_timer_free "1" "void aos_timer_free(aos_timer_t *timer)"
1 67 aos_timer_new "1" "int aos_timer_new(aos_timer_t *timer, void (*fn)(void *, void *), void *arg, int ms, int repeat)"
1 68 aos_timer_start "1" "int aos_timer_start(aos_timer_t *timer)"
1 69 aos_timer_stop "1" "int aos_timer_stop(aos_timer_t *timer)"
1 70 aos_uart_send "1" "int32_t aos_uart_send(void *data, uint32_t size, uint32_t timeout)"
1 71 aos_unlink "1" "int aos_unlink(const char *path)"
1 72 aos_unregister_event_filter "1" "int aos_unregister_event_filter(uint16_t type, aos_event_cb cb, void *priv)"
1 73 aos_version_get "1" "const char *aos_version_get(void)"
1 74 aos_write "1" "ssize_t aos_write(int fd, const void *buf, size_t nbytes)"
1 75 get_errno "1" "int get_errno(void)"
1 76 hal_ota_get_default_module "1" "hal_ota_module_t *hal_ota_get_default_module(void)"
1 77 hal_ota_init "1" "hal_stat_t hal_ota_init(void *something)"
1 78 hal_ota_read "1" "hal_stat_t hal_ota_read(hal_ota_module_t *m, volatile uint32_t *off_set, uint8_t *out_buf, uint32_t out_buf_len)"
1 79 hal_ota_register_module "1" "void hal_ota_register_module(hal_ota_module_t *module)"
1 80 hal_ota_set_boot "1" "hal_stat_t hal_ota_set_boot(hal_ota_module_t *m, void *something)"
1 81 hal_ota_write "1" "hal_stat_t hal_ota_write(hal_ota_module_t *m, volatile uint32_t *off_set, uint8_t *in_buf , uint32_t in_buf_len)"
1 82 hal_wifi_get_default_module "1" "hal_wifi_module_t *hal_wifi_get_default_module(void)"
1 83 hal_wifi_get_ip_stat "1" "int hal_wifi_get_ip_stat(hal_wifi_module_t *m, hal_wifi_ip_stat_t *out_net_para, hal_wifi_type_t wifi_type)"
1 84 hal_wifi_get_link_stat "1" "int hal_wifi_get_link_stat(hal_wifi_module_t *m, hal_wifi_link_stat_t *out_stat)"
1 85 hal_wifi_get_mac_addr "1" "void hal_wifi_get_mac_addr(hal_wifi_module_t *m, uint8_t *mac)"
1 86 hal_wifi_init "1" "int hal_wifi_init(void)"
1 87 hal_wifi_install_event "1" "void hal_wifi_install_event(hal_wifi_module_t *m, const hal_wifi_event_cb_t *cb)"
1 88 hal_wifi_power_off "1" "int hal_wifi_power_off(hal_wifi_module_t *m)"
1 89 hal_wifi_power_on "1" "int hal_wifi_power_on(hal_wifi_module_t *m)"
1 90 hal_wifi_register_module "1" "void hal_wifi_register_module(hal_wifi_module_t *module)"
1 91 hal_wifi_register_monitor_cb "1" "void hal_wifi_register_monitor_cb(hal_wifi_module_t *m, monitor_data_cb_t fn)"
1 92 hal_wifi_set_channel "1" "int hal_wifi_set_channel(hal_wifi_module_t *m, int ch)"
1 93 hal_wifi_start "1" "int hal_wifi_start(hal_wifi_module_t *m, hal_wifi_init_type_t *init_para)"
1 94 hal_wifi_start_adv "1" "int hal_wifi_start_adv(hal_wifi_module_t *m, hal_wifi_init_type_adv_t *init_para_adv)"
1 95 hal_wifi_start_scan "1" "void hal_wifi_start_scan(hal_wifi_module_t *m)"
1 96 hal_wifi_start_scan_adv "1" "void hal_wifi_start_scan_adv(hal_wifi_module_t *m)"
1 97 hal_wifi_start_wifi_monitor "1" "void hal_wifi_start_wifi_monitor(hal_wifi_module_t *m)"
1 98 hal_wifi_stop_wifi_monitor "1" "void hal_wifi_stop_wifi_monitor(hal_wifi_module_t *m)"
1 99 hal_wifi_suspend "1" "int hal_wifi_suspend(hal_wifi_module_t *m)"
1 100 hal_wifi_suspend_soft_ap "1" "int hal_wifi_suspend_soft_ap(hal_wifi_module_t *m)"
1 101 hal_wifi_suspend_station "1" "int hal_wifi_suspend_station(hal_wifi_module_t *m)"
1 102 hal_wlan_register_mgnt_monitor_cb "1" "void hal_wlan_register_mgnt_monitor_cb(hal_wifi_module_t *m, monitor_data_cb_t fn)"
1 103 hal_wlan_send_80211_raw_frame "1" "int hal_wlan_send_80211_raw_frame(hal_wifi_module_t *m, uint8_t *buf, int len)"
1 104 set_errno "1" "void set_errno(int err)"
1 105 umesh_get_device_state "CONFIG_AOS_MESH > 0u" "uint8_t umesh_get_device_state(void)"
1 106 umesh_get_mac_address "CONFIG_AOS_MESH > 0u" "const mac_address_t *umesh_get_mac_address(media_type_t type)"
1 107 umesh_get_mode "CONFIG_AOS_MESH > 0u" "uint8_t umesh_get_mode(void)"
1 108 umesh_init "CONFIG_AOS_MESH > 0u" "ur_error_t umesh_init(node_mode_t mode)"
1 109 umesh_set_mode "CONFIG_AOS_MESH > 0u" "ur_error_t umesh_set_mode(uint8_t mode)"
1 110 umesh_start "CONFIG_AOS_MESH > 0u" "ur_error_t umesh_start(void)"
1 111 umesh_stop "CONFIG_AOS_MESH > 0u" "ur_error_t umesh_stop(void)"
1 112 ur_adapter_get_default_ipaddr "CONFIG_AOS_MESH > 0u" "const void *ur_adapter_get_default_ipaddr(void)"
1 113 ur_adapter_get_mcast_ipaddr "CONFIG_AOS_MESH > 0u" "const void *ur_adapter_get_mcast_ipaddr(void)"
1 114 ali_aes_finish "MBEDTLS_IN_KERNEL > 0u" "ali_crypto_result ali_aes_finish(const uint8_t *src, size_t src_size, uint8_t *dst, size_t *dst_size, sym_padding_t padding, void *context)"
1 115 ali_aes_get_ctx_size "MBEDTLS_IN_KERNEL > 0u" "ali_crypto_result ali_aes_get_ctx_size(aes_type_t type, size_t *size)"
1 116 ali_aes_init "MBEDTLS_IN_KERNEL > 0u" "ali_crypto_result ali_aes_init(aes_type_t type, bool is_enc, const uint8_t *key1, const uint8_t *key2, size_t keybytes, const uint8_t *iv, void *context)"
1 117 mbedtls_ssl_close "MBEDTLS_IN_KERNEL > 0u" "int mbedtls_ssl_close(void *ssl)"
1 118 mbedtls_ssl_connect "MBEDTLS_IN_KERNEL > 0u" "void *mbedtls_ssl_connect(void *tcp_fd, const char *ca_cert, int ca_cert_len)"
1 119 mbedtls_ssl_recv "MBEDTLS_IN_KERNEL > 0u" "int mbedtls_ssl_recv(void *ssl, char *buffer, int length)"
1 120 mbedtls_ssl_send "MBEDTLS_IN_KERNEL > 0u" "int mbedtls_ssl_send(void *ssl, const char *buffer, int length)"
1 121 aos_malloc "RHINO_CONFIG_MM_DEBUG <= 0u || RHINO_CONFIG_GCC_RETADDR <= 0u" "void *aos_malloc(unsigned int size)"
1 122 aos_realloc "RHINO_CONFIG_MM_DEBUG <= 0u || RHINO_CONFIG_GCC_RETADDR <= 0u" "void *aos_realloc(void *mem, unsigned int size)"
1 123 aos_zalloc "RHINO_CONFIG_MM_DEBUG <= 0u || RHINO_CONFIG_GCC_RETADDR <= 0u" "void *aos_zalloc(unsigned int size)"
1 124 sys_aos_malloc "RHINO_CONFIG_MM_DEBUG > 0u && RHINO_CONFIG_GCC_RETADDR > 0u" "void *sys_aos_malloc(unsigned int size, size_t allocator)"
1 125 sys_aos_realloc "RHINO_CONFIG_MM_DEBUG > 0u && RHINO_CONFIG_GCC_RETADDR > 0u" "void *sys_aos_realloc(void *mem, unsigned int size, size_t allocator)"
1 126 sys_aos_zalloc "RHINO_CONFIG_MM_DEBUG > 0u && RHINO_CONFIG_GCC_RETADDR > 0u" "void *sys_aos_zalloc(unsigned int size, size_t allocator)"
1 127 aos_work_cancel "RHINO_CONFIG_WORKQUEUE  > 0" "int aos_work_cancel(aos_work_t *work)"
1 128 aos_work_destroy "RHINO_CONFIG_WORKQUEUE  > 0" "void aos_work_destroy(aos_work_t *work)"
1 129 aos_work_init "RHINO_CONFIG_WORKQUEUE  > 0" "int aos_work_init(aos_work_t *work, void (*fn)(void *), void *arg, int dly)"
1 130 aos_work_run "RHINO_CONFIG_WORKQUEUE  > 0" "int aos_work_run(aos_workqueue_t *workqueue, aos_work_t *work)"
1 131 aos_work_sched "RHINO_CONFIG_WORKQUEUE  > 0" "int aos_work_sched(aos_work_t *work)"
1 132 aos_workqueue_create "RHINO_CONFIG_WORKQUEUE  > 0" "int aos_workqueue_create(aos_workqueue_t *workqueue, int pri, int stack_size)"
1 133 aos_workqueue_del "RHINO_CONFIG_WORKQUEUE  > 0" "void aos_workqueue_del(aos_workqueue_t *workqueue)"
1 134 ip4addr_aton "WITH_LWIP > 0u" "int ip4addr_aton(const char *cp, ip4_addr_t *addr)"
1 135 ip4addr_ntoa "WITH_LWIP > 0u" "char *ip4addr_ntoa(const ip4_addr_t *addr)"
1 136 ipaddr_addr "WITH_LWIP > 0u" "u32_t ipaddr_addr(const char *cp)"
1 137 lwip_accept "WITH_LWIP > 0u" "int lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)"
1 138 lwip_bind "WITH_LWIP > 0u" "int lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)"
1 139 lwip_close "WITH_LWIP > 0u" "int lwip_close(int s)"
1 140 lwip_connect "WITH_LWIP > 0u" "int lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)"
1 141 lwip_eventfd "WITH_LWIP > 0u" "int lwip_eventfd(unsigned int initval, int flags)"
1 142 lwip_fcntl "WITH_LWIP > 0u" "int lwip_fcntl(int s, int cmd, int val)"
1 143 lwip_freeaddrinfo "WITH_LWIP > 0u" "void lwip_freeaddrinfo(struct addrinfo *ai)"
1 144 lwip_getaddrinfo "WITH_LWIP > 0u" "int lwip_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res)"
1 145 lwip_gethostbyname "WITH_LWIP > 0u" "struct hostent *lwip_gethostbyname(const char *name)"
1 146 lwip_getpeername "WITH_LWIP > 0u" "int lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)"
1 147 lwip_getsockname "WITH_LWIP > 0u" "int lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)"
1 148 lwip_getsockopt "WITH_LWIP > 0u" "int lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)"
1 149 lwip_htonl "WITH_LWIP > 0u" "u32_t lwip_htonl(u32_t n)"
1 150 lwip_htons "WITH_LWIP > 0u" "u16_t lwip_htons(u16_t n)"
1 151 lwip_ioctl "WITH_LWIP > 0u" "int lwip_ioctl(int s, long cmd, void *argp)"
1 152 lwip_listen "WITH_LWIP > 0u" "int lwip_listen(int s, int backlog)"
1 153 lwip_read "WITH_LWIP > 0u" "int lwip_read(int s, void *mem, size_t len)"
1 154 lwip_recv "WITH_LWIP > 0u" "int lwip_recv(int s, void *mem, size_t len, int flags)"
1 155 lwip_recvfrom "WITH_LWIP > 0u" "int lwip_recvfrom(int s, void *mem, size_t len, int flags, struct sockaddr *from, socklen_t *fromlen)"
1 156 lwip_select "WITH_LWIP > 0u" "int lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout)"
1 157 lwip_send "WITH_LWIP > 0u" "int lwip_send(int s, const void *data, size_t size, int flags)"
1 158 lwip_sendmsg "WITH_LWIP > 0u" "int lwip_sendmsg(int s, const struct msghdr *msg, int flags)"
1 159 lwip_sendto "WITH_LWIP > 0u" "int lwip_sendto(int s, const void *data, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)"
1 160 lwip_setsockopt "WITH_LWIP > 0u" "int lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)"
1 161 lwip_shutdown "WITH_LWIP > 0u" "int lwip_shutdown(int s, int how)"
1 162 lwip_socket "WITH_LWIP > 0u" "int lwip_socket(int domain, int type, int protocol)"
1 163 lwip_write "WITH_LWIP > 0u" "int lwip_write(int s, const void *data, size_t size)"
1 164 lwip_writev "WITH_LWIP > 0u" "int lwip_writev(int s, const struct iovec *iov, int iovcnt)"
1 165 aos_cloud_register_backend "1" "void aos_cloud_register_backend(int (*report)(const char *method, const char *json_buffer))"
1 166 aos_cloud_register_callback "1" "int aos_cloud_register_callback(int cb_type, aos_cloud_cb_t cb)"
1 167 aos_cloud_report "1" "int aos_cloud_report(const char *method, const char *json_buffer, void (*done_cb)(void *), void *arg)"
1 168 aos_cloud_trigger "1" "void aos_cloud_trigger(int cb_type, const char *json_buffer)"
