0 aos_alloc_trace "1" "void aos_alloc_trace(void *addr, size_t allocator)"
1 aos_cancel_delayed_action "1" "void aos_cancel_delayed_action(int ms, aos_call_t cb, void *private_data)"
2 aos_cancel_poll_read_fd "1" "void aos_cancel_poll_read_fd(int sock, aos_poll_call_t action, void *param)"
3 aos_cancel_work "1" "void aos_cancel_work(void *w, aos_call_t action, void *arg1)"
4 aos_cli_init "1" "int aos_cli_init(void)"
5 aos_cli_register_command "1" "int aos_cli_register_command(const struct cli_command *command)"
6 aos_cli_register_commands "1" "int aos_cli_register_commands(const struct cli_command *commands, int num_commands)"
7 aos_cli_stop "1" "int aos_cli_stop(void)"
8 aos_cli_unregister_command "1" "int aos_cli_unregister_command(const struct cli_command *command)"
9 aos_cli_unregister_commands "1" "int aos_cli_unregister_commands(const struct cli_command *commands, int num_commands)"
10 aos_close "1" "int aos_close(int fd)"
11 aos_closedir "1" "int aos_closedir(aos_dir_t *dir)"
12 aos_current_loop "1" "aos_loop_t aos_current_loop(void)"
13 aos_fcntl "1" "int aos_fcntl(int fd, int cmd, int val)"
14 aos_free "1" "void aos_free(void *mem)"
15 aos_get_hz "1" "int aos_get_hz(void)"
16 aos_ioctl "1" "int aos_ioctl(int fd, int cmd, unsigned long arg)"
17 aos_kv_del "1" "int aos_kv_del(const char *key)"
18 aos_kv_get "1" "int aos_kv_get(const char *key, void *buffer, int *buffer_len)"
19 aos_kv_set "1" "int aos_kv_set(const char *key, const void *val, int len, int sync)"
20 aos_loop_destroy "1" "void aos_loop_destroy(void)"
21 aos_loop_exit "1" "void aos_loop_exit(void)"
22 aos_loop_init "1" "aos_loop_t aos_loop_init(void)"
23 aos_loop_run "1" "void aos_loop_run(void)"
24 aos_loop_schedule_call "1" "int aos_loop_schedule_call(aos_loop_t *loop, aos_call_t fun, void *arg)"
25 aos_loop_schedule_work "1" "void *aos_loop_schedule_work(int ms, aos_call_t action, void *arg1, aos_call_t fini_cb, void *arg2)"
26 aos_lseek "1" "off_t aos_lseek(int fd, off_t offset, int whence)"
27 aos_mkdir "1" "int aos_mkdir(const char *path)"
28 aos_msleep "1" "void aos_msleep(int ms)"
29 aos_mutex_free "1" "void aos_mutex_free(aos_mutex_t *mutex)"
30 aos_mutex_lock "1" "int aos_mutex_lock(aos_mutex_t *mutex, unsigned int timeout)"
31 aos_mutex_new "1" "int aos_mutex_new(aos_mutex_t *mutex)"
32 aos_mutex_unlock "1" "int aos_mutex_unlock(aos_mutex_t *mutex)"
33 aos_now "1" "long long aos_now(void)"
34 aos_now_ms "1" "long long aos_now_ms(void)"
35 aos_open "1" "int aos_open(const char *path, int flags)"
36 aos_opendir "1" "aos_dir_t *aos_opendir(const char *path)"
37 aos_poll "1" "int aos_poll(struct pollfd *fds, int nfds, int timeout)"
38 aos_poll_read_fd "1" "int aos_poll_read_fd(int sock, aos_poll_call_t cb, void *private_data)"
39 aos_post_delayed_action "1" "int aos_post_delayed_action(int ms, aos_call_t action, void *param)"
40 aos_post_event "1" "int aos_post_event(uint16_t type, uint16_t code, unsigned long value)"
41 aos_queue_free "1" "void aos_queue_free(aos_queue_t *queue)"
42 aos_queue_new "1" "int aos_queue_new(aos_queue_t *queue, void *buf, unsigned int size, int max_msg)"
43 aos_queue_recv "1" "int aos_queue_recv(aos_queue_t *queue, unsigned int ms, void *msg, unsigned int *size)"
44 aos_queue_send "1" "int aos_queue_send(aos_queue_t *queue, void *msg, unsigned int size)"
45 aos_read "1" "ssize_t aos_read(int fd, void *buf, size_t nbytes)"
46 aos_readdir "1" "aos_dirent_t *aos_readdir(aos_dir_t *dir)"
47 aos_reboot "1" "void aos_reboot(void)"
48 aos_register_event_filter "1" "int aos_register_event_filter(uint16_t type, aos_event_cb cb, void *priv)"
49 aos_rename "1" "int aos_rename(const char *oldpath, const char *newpath)"
50 aos_schedule_call "1" "int aos_schedule_call(aos_call_t fun, void *arg)"
51 aos_sem_free "1" "void aos_sem_free(aos_sem_t *sem)"
52 aos_sem_new "1" "int aos_sem_new(aos_sem_t *sem, int count)"
53 aos_sem_signal "1" "void aos_sem_signal(aos_sem_t *sem)"
54 aos_sem_wait "1" "int aos_sem_wait(aos_sem_t *sem, unsigned int timeout)"
55 aos_stat "1" "int aos_stat(const char *path, struct stat *st)"
56 aos_sync "1" "int aos_sync(int fd)"
57 aos_task_exit "1" "void aos_task_exit(int code)"
58 aos_task_getspecific "1" "void *aos_task_getspecific(aos_task_key_t key)"
59 aos_task_key_create "1" "int aos_task_key_create(aos_task_key_t *key)"
60 aos_task_key_delete "1" "void aos_task_key_delete(aos_task_key_t key)"
61 aos_task_name "1" "const char *aos_task_name(void)"
62 aos_task_new "1" "int aos_task_new(const char *name, void (*fn)(void *), void *arg, int stack_size)"
63 aos_task_new_ext "1" "int aos_task_new_ext(aos_task_t *task, const char *name, void (*fn)(void *), void *arg, int stack_size, int prio)"
64 aos_task_setspecific "1" "int aos_task_setspecific(aos_task_key_t key, void *vp)"
65 aos_timer_change "1" "int aos_timer_change(aos_timer_t *timer, int ms)"
66 aos_timer_free "1" "void aos_timer_free(aos_timer_t *timer)"
67 aos_timer_new "1" "int aos_timer_new(aos_timer_t *timer, void (*fn)(void *, void *), void *arg, int ms, int repeat)"
68 aos_timer_start "1" "int aos_timer_start(aos_timer_t *timer)"
69 aos_timer_stop "1" "int aos_timer_stop(aos_timer_t *timer)"
70 aos_uart_send "1" "int32_t aos_uart_send(void *data, uint32_t size, uint32_t timeout)"
71 aos_unlink "1" "int aos_unlink(const char *path)"
72 aos_unregister_event_filter "1" "int aos_unregister_event_filter(uint16_t type, aos_event_cb cb, void *priv)"
73 aos_version_get "1" "const char *aos_version_get(void)"
74 aos_write "1" "ssize_t aos_write(int fd, const void *buf, size_t nbytes)"
75 get_errno "1" "int get_errno(void)"
76 hal_ota_get_default_module "1" "hal_ota_module_t *hal_ota_get_default_module(void)"
77 hal_ota_init "1" "hal_stat_t hal_ota_init(void *something)"
78 hal_ota_read "1" "hal_stat_t hal_ota_read(hal_ota_module_t *m, volatile uint32_t *off_set, uint8_t *out_buf, uint32_t out_buf_len)"
79 hal_ota_register_module "1" "void hal_ota_register_module(hal_ota_module_t *module)"
80 hal_ota_set_boot "1" "hal_stat_t hal_ota_set_boot(hal_ota_module_t *m, void *something)"
81 hal_ota_write "1" "hal_stat_t hal_ota_write(hal_ota_module_t *m, volatile uint32_t *off_set, uint8_t *in_buf , uint32_t in_buf_len)"
82 hal_wifi_get_default_module "1" "hal_wifi_module_t *hal_wifi_get_default_module(void)"
83 hal_wifi_get_ip_stat "1" "int hal_wifi_get_ip_stat(hal_wifi_module_t *m, hal_wifi_ip_stat_t *out_net_para, hal_wifi_type_t wifi_type)"
84 hal_wifi_get_link_stat "1" "int hal_wifi_get_link_stat(hal_wifi_module_t *m, hal_wifi_link_stat_t *out_stat)"
85 hal_wifi_get_mac_addr "1" "void hal_wifi_get_mac_addr(hal_wifi_module_t *m, uint8_t *mac)"
86 hal_wifi_init "1" "int hal_wifi_init(void)"
87 hal_wifi_install_event "1" "void hal_wifi_install_event(hal_wifi_module_t *m, const hal_wifi_event_cb_t *cb)"
88 hal_wifi_power_off "1" "int hal_wifi_power_off(hal_wifi_module_t *m)"
89 hal_wifi_power_on "1" "int hal_wifi_power_on(hal_wifi_module_t *m)"
90 hal_wifi_register_module "1" "void hal_wifi_register_module(hal_wifi_module_t *module)"
91 hal_wifi_register_monitor_cb "1" "void hal_wifi_register_monitor_cb(hal_wifi_module_t *m, monitor_data_cb_t fn)"
92 hal_wifi_set_channel "1" "int hal_wifi_set_channel(hal_wifi_module_t *m, int ch)"
93 hal_wifi_start "1" "int hal_wifi_start(hal_wifi_module_t *m, hal_wifi_init_type_t *init_para)"
94 hal_wifi_start_adv "1" "int hal_wifi_start_adv(hal_wifi_module_t *m, hal_wifi_init_type_adv_t *init_para_adv)"
95 hal_wifi_start_scan "1" "void hal_wifi_start_scan(hal_wifi_module_t *m)"
96 hal_wifi_start_scan_adv "1" "void hal_wifi_start_scan_adv(hal_wifi_module_t *m)"
97 hal_wifi_start_wifi_monitor "1" "void hal_wifi_start_wifi_monitor(hal_wifi_module_t *m)"
98 hal_wifi_stop_wifi_monitor "1" "void hal_wifi_stop_wifi_monitor(hal_wifi_module_t *m)"
99 hal_wifi_suspend "1" "int hal_wifi_suspend(hal_wifi_module_t *m)"
100 hal_wifi_suspend_soft_ap "1" "int hal_wifi_suspend_soft_ap(hal_wifi_module_t *m)"
101 hal_wifi_suspend_station "1" "int hal_wifi_suspend_station(hal_wifi_module_t *m)"
102 hal_wlan_register_mgnt_monitor_cb "1" "void hal_wlan_register_mgnt_monitor_cb(hal_wifi_module_t *m, monitor_data_cb_t fn)"
103 hal_wlan_send_80211_raw_frame "1" "int hal_wlan_send_80211_raw_frame(hal_wifi_module_t *m, uint8_t *buf, int len)"
104 set_errno "1" "void set_errno(int err)"
105 umesh_get_device_state "CONFIG_AOS_MESH > 0u" "uint8_t umesh_get_device_state(void)"
106 umesh_get_mac_address "CONFIG_AOS_MESH > 0u" "const mac_address_t *umesh_get_mac_address(media_type_t type)"
107 umesh_get_mcast_addr "CONFIG_AOS_MESH > 0u" "const ur_netif_ip6_address_t *umesh_get_mcast_addr(void)"
108 umesh_get_mode "CONFIG_AOS_MESH > 0u" "uint8_t umesh_get_mode(void)"
109 umesh_get_ucast_addr "CONFIG_AOS_MESH > 0u" "const ur_netif_ip6_address_t *umesh_get_ucast_addr(void)"
110 umesh_init "CONFIG_AOS_MESH > 0u" "ur_error_t umesh_init(node_mode_t mode)"
111 umesh_set_mode "CONFIG_AOS_MESH > 0u" "ur_error_t umesh_set_mode(uint8_t mode)"
112 umesh_start "CONFIG_AOS_MESH > 0u" "ur_error_t umesh_start(void)"
113 umesh_stop "CONFIG_AOS_MESH > 0u" "ur_error_t umesh_stop(void)"
114 mbedtls_ssl_close "MBEDTLS_IN_KERNEL > 0u" "int mbedtls_ssl_close(void *ssl)"
115 mbedtls_ssl_connect "MBEDTLS_IN_KERNEL > 0u" "void *mbedtls_ssl_connect(void *tcp_fd, const char *ca_cert, int ca_cert_len)"
116 mbedtls_ssl_recv "MBEDTLS_IN_KERNEL > 0u" "int mbedtls_ssl_recv(void *ssl, char *buffer, int length)"
117 mbedtls_ssl_send "MBEDTLS_IN_KERNEL > 0u" "int mbedtls_ssl_send(void *ssl, const char *buffer, int length)"
118 aos_malloc "RHINO_CONFIG_MM_DEBUG <= 0u || RHINO_CONFIG_GCC_RETADDR <= 0u" "void *aos_malloc(unsigned int size)"
119 aos_realloc "RHINO_CONFIG_MM_DEBUG <= 0u || RHINO_CONFIG_GCC_RETADDR <= 0u" "void *aos_realloc(void *mem, unsigned int size)"
120 aos_zalloc "RHINO_CONFIG_MM_DEBUG <= 0u || RHINO_CONFIG_GCC_RETADDR <= 0u" "void *aos_zalloc(unsigned int size)"
121 ali_aes_finish "RHINO_CONFIG_MM_DEBUG > 0u && RHINO_CONFIG_GCC_RETADDR > 0u" "ali_crypto_result ali_aes_finish(const uint8_t *src, size_t src_size, uint8_t *dst, size_t *dst_size, sym_padding_t padding, void *context)"
122 ali_aes_get_ctx_size "RHINO_CONFIG_MM_DEBUG > 0u && RHINO_CONFIG_GCC_RETADDR > 0u" "ali_crypto_result ali_aes_get_ctx_size(aes_type_t type, size_t *size)"
123 ali_aes_init "RHINO_CONFIG_MM_DEBUG > 0u && RHINO_CONFIG_GCC_RETADDR > 0u" "ali_crypto_result ali_aes_init(aes_type_t type, bool is_enc, const uint8_t *key1, const uint8_t *key2, size_t keybytes, const uint8_t *iv, void *context)"
124 sys_aos_malloc "RHINO_CONFIG_MM_DEBUG > 0u && RHINO_CONFIG_GCC_RETADDR > 0u" "void *sys_aos_malloc(unsigned int size, size_t allocator)"
125 sys_aos_realloc "RHINO_CONFIG_MM_DEBUG > 0u && RHINO_CONFIG_GCC_RETADDR > 0u" "void *sys_aos_realloc(void *mem, unsigned int size, size_t allocator)"
126 sys_aos_zalloc "RHINO_CONFIG_MM_DEBUG > 0u && RHINO_CONFIG_GCC_RETADDR > 0u" "void *sys_aos_zalloc(unsigned int size, size_t allocator)"
127 aos_work_cancel "RHINO_CONFIG_WORKQUEUE  > 0" "int aos_work_cancel(aos_work_t *work)"
128 aos_work_destroy "RHINO_CONFIG_WORKQUEUE  > 0" "void aos_work_destroy(aos_work_t *work)"
129 aos_work_init "RHINO_CONFIG_WORKQUEUE  > 0" "int aos_work_init(aos_work_t *work, void (*fn)(void *), void *arg, int dly)"
130 aos_work_run "RHINO_CONFIG_WORKQUEUE  > 0" "int aos_work_run(aos_workqueue_t *workqueue, aos_work_t *work)"
131 aos_work_sched "RHINO_CONFIG_WORKQUEUE  > 0" "int aos_work_sched(aos_work_t *work)"
132 aos_workqueue_create "RHINO_CONFIG_WORKQUEUE  > 0" "int aos_workqueue_create(aos_workqueue_t *workqueue, int pri, int stack_size)"
133 aos_workqueue_del "RHINO_CONFIG_WORKQUEUE  > 0" "void aos_workqueue_del(aos_workqueue_t *workqueue)"
134 ip4addr_aton "WITH_LWIP > 0u" "int ip4addr_aton(const char *cp, ip4_addr_t *addr)"
135 ip4addr_ntoa "WITH_LWIP > 0u" "char *ip4addr_ntoa(const ip4_addr_t *addr)"
136 ipaddr_addr "WITH_LWIP > 0u" "u32_t ipaddr_addr(const char *cp)"
137 lwip_accept "WITH_LWIP > 0u" "int lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)"
138 lwip_bind "WITH_LWIP > 0u" "int lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)"
139 lwip_close "WITH_LWIP > 0u" "int lwip_close(int s)"
140 lwip_connect "WITH_LWIP > 0u" "int lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)"
141 lwip_eventfd "WITH_LWIP > 0u" "int lwip_eventfd(unsigned int initval, int flags)"
142 lwip_fcntl "WITH_LWIP > 0u" "int lwip_fcntl(int s, int cmd, int val)"
143 lwip_freeaddrinfo "WITH_LWIP > 0u" "void lwip_freeaddrinfo(struct addrinfo *ai)"
144 lwip_getaddrinfo "WITH_LWIP > 0u" "int lwip_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res)"
145 lwip_gethostbyname "WITH_LWIP > 0u" "struct hostent *lwip_gethostbyname(const char *name)"
146 lwip_getpeername "WITH_LWIP > 0u" "int lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)"
147 lwip_getsockname "WITH_LWIP > 0u" "int lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)"
148 lwip_getsockopt "WITH_LWIP > 0u" "int lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)"
149 lwip_htonl "WITH_LWIP > 0u" "u32_t lwip_htonl(u32_t n)"
150 lwip_htons "WITH_LWIP > 0u" "u16_t lwip_htons(u16_t n)"
151 lwip_ioctl "WITH_LWIP > 0u" "int lwip_ioctl(int s, long cmd, void *argp)"
152 lwip_listen "WITH_LWIP > 0u" "int lwip_listen(int s, int backlog)"
153 lwip_read "WITH_LWIP > 0u" "int lwip_read(int s, void *mem, size_t len)"
154 lwip_recv "WITH_LWIP > 0u" "int lwip_recv(int s, void *mem, size_t len, int flags)"
155 lwip_recvfrom "WITH_LWIP > 0u" "int lwip_recvfrom(int s, void *mem, size_t len, int flags, struct sockaddr *from, socklen_t *fromlen)"
156 lwip_select "WITH_LWIP > 0u" "int lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout)"
157 lwip_send "WITH_LWIP > 0u" "int lwip_send(int s, const void *data, size_t size, int flags)"
158 lwip_sendmsg "WITH_LWIP > 0u" "int lwip_sendmsg(int s, const struct msghdr *msg, int flags)"
159 lwip_sendto "WITH_LWIP > 0u" "int lwip_sendto(int s, const void *data, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)"
160 lwip_setsockopt "WITH_LWIP > 0u" "int lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)"
161 lwip_shutdown "WITH_LWIP > 0u" "int lwip_shutdown(int s, int how)"
162 lwip_socket "WITH_LWIP > 0u" "int lwip_socket(int domain, int type, int protocol)"
163 lwip_write "WITH_LWIP > 0u" "int lwip_write(int s, const void *data, size_t size)"
164 lwip_writev "WITH_LWIP > 0u" "int lwip_writev(int s, const struct iovec *iov, int iovcnt)"
